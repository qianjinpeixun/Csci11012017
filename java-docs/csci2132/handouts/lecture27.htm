<HTML>

<HEAD>
<TITLE> Lecture 27 Notes, CSCI 2132 </TITLE>
</HEAD>

<BODY>
<h1>Lecture 27, CSCI 2132</h1>
</li>
This program provides a simple text-based menu to ask user to choose options. Pay attention to each function that performs an operation on the linked list. The basic step of performing insertion include:
<ol>
  <li>Allocate memory for the node</li>
  <li>Store data in the node</li>
  <li>Insert the node into the list</li>
</ol>
<p>It is important to use malloc to allocate before storing data. </p>
<p>To delete a node, we perform the following main steps:</p>
<ol>
  <li>Locate the node to be deleted</li>
  <li>Alter the previous node so that it points to the node following the node to be deleted</li>
  <li>Use free to reclaim the memory storage occupied by the deleted node</li>
</ol>
<p>Note that the order of the above steps is important. Step 3 is necessary in order to avoid memory leaks.</p>
<p>In this example, we destroy the entire list and free the memory occupied by it before the program terminates. If we do not do this, the operating system will still free all the memory that the program uses when the program terminates. Thus, destroying the list is optional for this particular example, since we use the linked list throughout the program execution and the O/S will deallocate memory when the program terminates. It is however a good design choice to destroy the list: If we use this program as part of a software product, then it is possible that at some stage, we no longer need this linked list. Then deallocating the linked list when it's not in use is good for code reusing.</p>
<p>The above is the implementation of some fundamental algorithms on a linked list. </p>
<p> Now let's implement some more complex algorithms. Recall that when I showed you the code for mergesort on arrays, I mentioned that in practice, quicksort is faster on arrays while mergesort is faster on linked lists. Now let's implement mergesort on linked lists. We still use the student database as an example. This time we modify the program by adding one more option in the menu which is to sort the list of students by student number. The code can be found at:</p>
<pre>/users/faculty/prof2132/public/sortlist.c
</pre>
<p>The following are the basic steps of performing mergesort on a linked list:</p>
<ol>
  <li>Divide: Divide the n-element linked list to be sorted into two sub-lists of n/2 elements each</li>
  <li> Conquer: Sort the two sub-lists recursively using mergesort</li>
  <li> Combine: Merge the two sorted sub-lists to produce the sorted answer </li>
</ol>
<p>Here one interesting issue is how to perform Step 1. This is not a problem at all with arrays since we can perform random access on arrays. How to divide a linked list into two halves? There are two solutions.</p>
<p>Solution 1:</p>
<ol>
  <li>Use one loop to count the number, n, of elements in the linked list</li>
  <li> Start from the head, and follow the next pointer n/2 times to reach the head for the second sub-list</li>
</ol>
<p>Solution 2:</p>
<ol>
  <li>Declare two pointers that both initially point to the head of the linked list</li>
  <li> Move the second pointer towards the tail twice while moving the first pointer once </li>
  <li>Repeat Step 2 till the second pointer reaches the tail. At this time, the first pointer points to a node in the middle of the list</li>
</ol>
<p>Which solution is superior? The first solution performs two loops. The first loop iterates through the entire list, while the second loop iterates through half the list. In the second solution, one pointer iterates through the entire list while another pointer iterates through half the list. There does not seem to be any major difference in the total number of nodes visited. However, in the first solution, we need perform arithmetic computations such as counting and comparing integers, while the second solution avoids arithmetic calculation. Thus, the second solution is superior.</p>
<p>The mergesort function uses Solution 2, and it also calls a merge function which merges two sorted linked lists into one.</p>
<p>&nbsp;</p>
</BODY>

</HTML>
