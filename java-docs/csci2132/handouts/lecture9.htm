<HTML>

<HEAD>
<TITLE> Lecture 9 Notes, CSCI 2132 </TITLE>
</HEAD>

<BODY>
<h1>Lecture 9, CSCI 2132</h1>
<h3>Command Substitution</h3>
<p>Now let us learn another feature called command substitution. If we place a command within a pair of grave accents and then include it as part of a command line, then this command will be executed, and its output will be inserted in the command line. For example, the following command line can be used to print a text message that tells us how many files there are in the current working directory:</p>
<pre>echo There are `ls | wc -l` files in the current directory</pre>
<h2>Process</h2>
<h3>Programs and Processes</h3>
<p>When we run a program, we create a process. Thus programs and processes are related. They are however different. A program is a piece of code which is inactive, while a process is a running program which is active. A process is instantiated from a program.</p>
<h3>Process Composition</h3>
<p>A process occupies memory space, which is a chunk of memory consists of the following four parts:</p>
<ul>
  <li>Code, which stores the program</li>
  <li>Data, which stores static data, i.e., data whose values are maintained throughout the execution</li>
  <li>Heap, which is used for dynamic allocation</li>
  <li>Stack, which is used to store temporary data</li>
</ul>
<p>When we learn C programming, we will see exactly what types of variables are stored in which part of the memory, and how exactly each part of the memory is maintained.<br>
  <br>
The active part of the process is the thread of execution. We know that the code section contains the program (instructions). The process runs by executing the program instructions sequentially. The sequential execution of program instructions forms a thread of execution.</p>
<p>The operating system maintains a process control block (PCB) for each process, which stores information about this process. Some typical information stored in a PCB includes:</p>
<ul>
  <li>The present position in the thread of execution</li>
  <li>Resources allocated to the process (e.g., memory, open files)</li>
  <li>Process permissions. Typically, for each file, the permission for the process is the same as the permission for the user who runs the process.</li>
</ul>
<h3>Process Identification</h3>
<p>Each process is identified by a unique nonnegative integer called PID (process identifier).</p>
<h3>Process Creation</h3>
<p>Processes can only be created by other processes. When a user runs a program, the shell (a process) creates the process of the program.</p>
<p>We now describe how a parent process creates a child process. A parent process first &quot;forks&quot; itself into two processes, itself and a child process. Here, &quot;fork&quot; is a system call, and system calls provide an interface for programmers to use kernel functionality. At this point, a new process has been created. This is however not done yet, because the child process is a clone of its parent. The child process then &quot;exec&quot; (another system call) a new program that replaces the child's original program (which was the same as its parent's program). After this, the new program begins executing inside the child.</p>
<p>In the above process, why is the child process initially created as a clone of the parent? This is because most computer systems use linear memory, and memory copying is more efficient than constructing memory layout from scratch. As UNIX optimizes for efficiency, this is used in process creation. In Windows, however, a child process' memory layout is constructed from scratch. This is safer (against programmer errors, since error states of the parent won't be copied over), but less efficient.</p>
<h3>Foreground Processes and Background Processes</h3>
<p>A foreground process is the process that controls the keyboard of a terminal. </p>
<p>A background process cannot read from the terminal, but can output to the screen. To create a background process, we can suffix an &amp; to the command line. If we know that the background process might print a lot of output and error messages, then it might be preferable to redirect stdout and stderr. For example, the following command will search for the file gcc in the entire file system (i.e., starting from the root directory) to look for a file named gcc:</p>
<pre>find / -name gcc &gt; result 2&gt; error &amp;</pre>
<h3>Process Control </h3>
<p>There are some external commands that can be used to control processes. The command ps can display a list of processes created by the current shell. Some information for each process displayed includes PID and CMD (the command entered to create this process). </p>
<p>Sometime we would like to terminate a process. To do this, run the command kill followed by the PID.</p>
<p>These commands are easy to use. What is more interesting is the job control mechanism provided by Bash.</p>
<h3>&nbsp;</h3>
<p>&nbsp;</p>
<p>&nbsp;</p>
<pre>&nbsp; </pre>
<p><br>
</p>
</BODY>

</HTML>
