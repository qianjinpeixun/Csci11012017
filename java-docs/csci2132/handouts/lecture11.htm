<HTML>

<HEAD>
<TITLE> Lecture 11 Notes, CSCI 2132 </TITLE>
</HEAD>

<BODY>
<h1>Lecture 11, CSCI 2132</h1>
<h2>Formatted Input / Output</h2>
<h3>printf: Print Formatted</h3>
<p>As we learned before, in C output is done using a library function called printf. The following is the syntax of printf:</p>
<pre>printf(format string, exp1, exp2, ...);</pre>
<p>Here a format string is a C string that may contain conversion specifications. A conversion specification is a place holder indicating where the value of an expression| is to be filled in during printing, and in what format this value will be printed. The general form of a conversion specification is %m.px or %-m.px. Here m and p are integer constants and they are optional. If p is not presented, then dot is also dropped. Finally, x is a single letter such as d and f. </p>
<p>We will learn a set of rules regarding conversion specifications in Lab 4, and they are easy to follow. There is some additional information here. First, to print %, we use %% in the format string. Here %% itself is a conversion specification in which x is %. The newline symbol \n is an escape sequence. There are some other escape sequences. For example, \t is the tab symbol. \a can cause the system to ring a bell. \\ is used to display the character \.</p>
<h3>scanf: Reading input according to a specific format</h3>
<p>scanf also uses a format string. A scanf format string often contains conversion specifications only. The following is an example.</p>
<pre>int i, j;
float x, y;
scanf(&quot;%d%d%f%f&quot;, &amp;i, &amp;j, &amp;x, &amp;y);</pre>
<p>The user can then type values for i, j, x and y, e.g., </p>
<pre>1 -20 .3 -4.0e3</pre>
<p>Here the symbol &amp; is usually required. Forgetting &amp; is a common error. It is however not always required. We will learn when not to use it when we learn what it exactly means. For now, use it for  variables.</p>
<p>The way scanf works is like a pattern matching process. scanf processes the information in the format string from left to right. For each conversion specification in the format string, scanf tries to locate an item of the appropriate type in the input data, skipping white spaces (spaces, newlines, tabs, ...) if necessary. scanf then reads the item, stopping when it encounters a character that can't possibly belong to the item. If the item was read successfully, scanf continues to process input. Otherwise, scanf returns immediately.</p>
<p>For example, we have the following piece of code:</p>
<pre>int i, j;
float x, y;
scanf(&quot;%d%d%f%f&quot;, &amp;i, &amp;j, &amp;x, &amp;y);</pre>
<p>If the user enters the following three lines of input:</p>
<pre>   1
-20  .3
   -4.0e3</pre>
<p>By the description of the above pattern matching process, these four values will be assigned to variables correctly, even though there are multiple space characters and newline characters between them. The final newline will be put back to the input sequence and be the 1st character read by the next scanf.</p>
<p>If the user enters the following line of input for the same code snippet:</p>
<pre>1-20.3-4.0e3</pre>
<p>Then the values of i, j, x and y after this will be 1, -20, .3 and -4.0e3, respectively.</p>
<p>If the user enters</p>
<pre>1 -20.3 -4.5 5.5</pre>
<p>Then the values of i, j, x and y after this will be 1, -20, .3 and -4.5, respectively. The 5.5 will be left for the next scanf.</p>
<p>If the user inputs</p>
<pre>1.1 -20 -4.5 .5</pre>
<p>Then after assigning 1 to i, scanf sees a dot, and it returns without processing the rest of the format string / input.</p>
<p>&nbsp;</p>
</BODY>

</HTML>
