<HTML>

<HEAD>
<TITLE> Lecture 26 Notes, CSCI 2132 </TITLE>
</HEAD>

<BODY>
<h1>Lecture 26, CSCI 2132</h1>
<p>To access a member of the structure, we can use the dot operator. For example, if we wish to assign values to the members of the variable z defined above, we can write:</p>
<pre>z.number = 123456;
strcpy(z.name, &quot;John King&quot;);</pre>
<p>There is another operator called arrow operator, and it is the shorthand for using dereference and dot operators on a pointer to a structure. Read the following piece of code, in which p and z are variables defined above:</p>
<pre>p = &amp;z;
(*p).number = 222333;</pre>
<p>The second line of the code is equivalent to:</p>
<pre>p-&gt;number = 222333;</pre>
<p>Structure can also be used as function parameters. It is however not always a good idea to pass a large structure by value to a function: This requires the copying of the values of all the members of the structure argument to corresponding members of the structure parameter, which is time-consuming. To address this efficiency issue, we often pass pointers to structures to a function. We will see how to do this soon when implementing linked lists.</p>
<h3>Dynamic Memory Allocation</h3>
<p>When we implement dynamic data structures, as the number of data elements stored in these data structures changes during program execution, we need acquire and free blocks of memory during program execution. Dynamic memory allocation makes this possible.</p>
<p>In C, dynamic memory allocation is done using functions defined in stdlib.h. The function for acquiring a block of memory is malloc:</p>
<pre>void* malloc(size_t size);</pre>
<p>This function returns a pointer to an unused memory block of size bytes, or the NULL pointer if the system is out of memory. In this prototype, void * is a &quot;generic&quot; pointer, which is just a memory address. To use malloc properly, we need always check whether it succeeded in allocating a block of memory, and write code similar to:</p>
<pre>p = malloc(10000);
if (p == NULL) {
  ...
}</pre>
<p>To free a block of dynamically allocated memory that the program no longer uses, we use another function called free:</p>
<pre>void free(void *ptr);</pre>
<p>This frees the memory block pointed to by ptr. This function can be used only for memory allocated by malloc. You cannot use it to free memory that is not dynamically allocated. After executing this function, ptr will become a dangling pointer: free does not change the value of ptr itself. It still points to the memory block that is freed. In our programs, we should never access memory that has been freed, as they might be used to store some other data that we have no knowledge of.</p>
<p>If we use dynamic memory allocation improperly, our programs may create garbage, which is a memory block that is no longer accessible to a program. This can happen if we have a pointer that is the only pointer pointing to a dynamically allocated block of memory, and we then make it point to another variable without freeing this memory block first. C doesn't do automatic garbage collection, which is a feature of Java. This is because automatic garbage collection undermines the time and/or space efficiency of programs, and since efficiency is the top priority of C, programmers are required to do garbage collection themselves by freeing blocks of memory when our program no longer accesses them. A program that leaves behind garbage has a memory leak, and we must always avoid memory leaks.</p>
<h3>Linked Lists</h3>
<p>Now let's use what we have learned to implement a linked list. A linked list is a data structure consisting of a set of nodes which represent a sequence together. An array can also be used to represent a sequence. The main advantage of using a linked list is that the insertion and deletion of a data element in a linked list is fast. The main advantage of arrays is that they provide random access. The following figure illustrates a linked list. </p>
<p><img src="linkedlist.gif" width="612" height="120" alt="linkedlist"></p>
<p>In C, we can use a pointer to the next node in each node to chain the nodes together. This suggests us to model each node as a C structure that has data member(s) and a member that is the pointer to the next node. The pointer member in the last node stores a NULL pointer. For example, if we store an int value in each linked list, then we can declare the following node type:</p>
<pre>struct node {
  int value;
  struct node *next;
};</pre>
<p>To create an empty list, we can use the following definition:</p>
<pre>struct node *list = NULL;</pre>
<p>This list pointer will always point to the head of the linked list. This way our program can access each node, and we can avoid memory leaks.</p>
<p>To show how to implement fundamental algorithms on a linked list, let's study an example that uses a linked list to implement a simple student database. The source code can be found at:</p>
<pre>/users/faculty/prof2132/public/list.c</pre>
<p>This program shows how to perform a number of operations on a linked list:</p>
<ul>
  <li>Inserting a node at the beginning of the linked list</li>
  <li>Printing the data element stored at each node of the linked list</li>
  <li>Searching for a node</li>
  <li>Deleting a node</li>
  <li>Destroying the entire linked list and reclaim its memory
</ul>
</li>
I will talk more about this example in the next lecture.
<p>&nbsp;</p>
<p>&nbsp;</p>
</BODY>

</HTML>
