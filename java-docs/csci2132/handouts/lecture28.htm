<HTML>

<HEAD>
<TITLE> Lecture 28 Notes, CSCI 2132 </TITLE>
</HEAD>

<BODY>
<h1>Lecture 28, CSCI 2132</h1>
<h3>Heap (Free Store)</h3>
<p>What happens in the low level when we perform dynamic memory allocation? To answer this question, we need look at the memory of a process again. Previously we learned what are stored in the code, data and stack part of the memory of a process. Now let's look at the heap memory.</p>
<p>The heap (also called free store) is a large pool of memory used for dynamic storage allocation. Thus the function malloc allocates memory from the heap, while the function free &quot;returns&quot; a memory block to the heap. </p>
<p>There are advantages and disadvantages of using memory from the heap. First, since the heap is a large pool of memory, large data, such as large arrays and structures, should be allocated in the heap. The stack may not have enough memory for these data. </p>
<p>Second, dynamically allocated memory stays allocated until it is deallocated explicitly or the process terminates. Thus, a function can return a pointer to a dynamically allocated memory block, and its caller can make use of this memory space. While this is useful, it  may also lead to memory leak if we programmers do not deallocate dynamically allocated memory when it's no longer in use. </p>
<p>Finally, heap allocation is slower than stack allocation. This is because different processes may allocate and deallocate from heap frequently, and as a result, available memory in the heap is not a contiguous piece of memory. Thus, operating systems use various algorithms to manage the heap memory, and these algorithms require computation. You will learn more details about these algorithms in an operating system course. Thus for small static data, it does not make sense to use dynamic memory allocation for them.</p>
<h2>Dynamic Arrays</h2>
<p>This lecture is about allocating array-based structures dynamically. We will start from strings, as string variables are essentially character arrays.</p>
<h3>Dynamically Allocated Strings</h3>
<p>We make use of the array/pointer connection to allocate strings dynamically. When we allocate storage, we should always set the size to be the string length + 1, in order to have one byte for the null character. Strings allocated using dynamic memory allocation can also be used in C library functions for strings. </p>
<p>The following is an example of concatenating two strings without modifying either string (this is a short example from the textbook). To implement a function for this, instead of storing the result in one string like strcat does, we store the result in a dynamically-allocated string.</p>
<pre>char* concat(const char *s1, const char *s2) {
  char * result;

  result = malloc(strlen(s1) + strlen(s2) + 1);
  if (result == NULL) {
    printf(&quot;Error: malloc failed in concat\n&quot;);
    exit(EXIT_FAILURE);
  }

  strcpy(result, s1);
  strcat(result, s2);

  return result;
}</pre>
<p>To use the concat function, we can write something like:</p>
<pre>char *p;
p = concat(&quot;abc&quot;, &quot;defg&quot;);
...
free(p);</pre>
<p>Note that we should free p when we no longer use it.</p>
<p>Now, let's see a longer example of using dynamically allocated strings, which is also a good example of C strings. In this example, we are asked to write a function to reverse words in a string. In this string, words are separated by spaces, and punctuations are treated the same as letters. For example, if the string is &quot;Do or do not, there is no try.&quot;, then after we reverse its words, we get &quot;try. no is there not, do or Do&quot;. The following is the main idea of the implementation:</p>
<ol>
  <li>Scan the string backward to identify words</li>
  <li> Copy the words into a temporary buffer</li>
  <li>Copy the buffer back to the original string</li>
</ol>
<p>Here, this buffer can be created as a dynamically allocated string. For more details, see:</p>
<pre>/users/faculty/prof2132/public/reversewords.c
</pre>
<p>It is in fact possible to implement this function without using a buffer, which will improve its space efficiency. I left this as homework. I will show the solution in the next lecture.
</p>
<p>&nbsp;</p>
<h2>&nbsp;</h2>
</BODY>

</HTML>
