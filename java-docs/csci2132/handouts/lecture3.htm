<HTML>

<HEAD>
<TITLE> Lecture 3 Notes, CSCI 2132 </TITLE>
</HEAD>

<BODY>
<h1>Lecture 3, CSCI 2132</h1>
<h3>Input, Output and Error Channels</h3>
<p>There are three default I/O channels in a UNIX system:</p>
<ul>
  <li>stdin (standard input)</li>
  <li>stdout (standard output)</li>
  <li>stderr (standard error)</li>
</ul>
<p>In UNIX, a program reads input from stdin, writes its output to stdout and writes error messages to stderr. By default, all three channels are the terminal running the program or command. Later we will learn how to use a mechanism called redirection to change the default I/O channels of a program.</p>
<h3>Getting Help Online: man</h3>
<p>There is a UNIX command called man that can be used to get the manual page about a command or a system function. There are two ways of running man. The syntax of the explicit way is</p>
<pre>man command-name</pre>
<p>This can be used to get the manual page of the command &quot;command-name&quot;. Some examples are</p>
<pre>man clear
man man</pre>
<p>You can also specify a keyword and ask man to give a list of programs that fit the keyword, together with a short description of each program. You can then look for the program that performs the task that you would like to perform, and use man in the explicit way to find out how to use the program. The syntax is</p>
<pre>man -k keyword</pre>
<p>An example:</p>
<pre>
man -k password
</pre>
<h3>Special Characters (Metacharacters)</h3>
<p>Special characters are characters that are interpreted specially when typed at a UNIX terminal. Here we will learn two of them.</p>
<p>First, the special character Control-C (^C) can be used to terminate a process. </p>
<p>Second, there is a special character that can be used to indicate end of input (or end of file - EOF), which is ^D. Many utilities take input from either a file or the keyboard. In the latter case, you must tell the utility when the input from the keyboard is finished. The following is an example that uses both redirection and ^D:</p>
<pre>$cat &gt; hamlet.txt
To be or not to be
that is the question
^D
$cat hamlet.txt</pre>
<p>In this example, we fist use cat to create a file. By default, when cat is run without any arguments, it will read one line from the user, display the same line, read another line from the user and display it, and so on. This requires the user to specify the end of input, or it will keep running forever. ^D can be used as EOF. The &gt; is used to redirect the output into a file named hamlet.txt. With this, the shell saves the output of cat in a file named hamlet.txt instead of letting cat display it on the monitor. This way we can create a simple text file with two lines only. After this, we use cat to display the content of the created file, as entering cat using a file name as its argument will ask cat to display the content of this file (no redirection is involved).</p>
<h3>Logging Out</h3>
<p>To logout of the system, we simply enter ^D. This will work for most UNIX distributions. Some systems think this is a bad idea as users could press ^D by mistake, so ^D will not log you out. If this is the case, we can enter either the command logout or the command exit. Both will work, but there is a subtle difference which I will explain when we learn more about UNIX shells.<br>
</p>
<h2>Files and Directories</h2>
<h3>What is a File?</h3>
<p>In the UNIX file model, a file is a stream of bytes. Some examples include regular files (text, photo, video, program source file, executable program...), stdin, stdout, stderr, keyboard, monitor, hard disk, CD/DVD drive. Thus files represent all input/output under UNIX. </p>
<p>This is a good example of abstraction, and the main advantage is that one general read/write interface works for all files. This is good software development practice, as we don't need provide specialized interface for different I/O systems. When we learn file manipulation in C, we can see that C file functions can work if we use stdin/stdout/stderr  as files to be processed. </p>
<p>We can further state that in UNIX, everything is either a file or a process.</p>
<h3>Types of Files</h3>
<p>There are seven types of files in UNIX:</p>
<p>1. Regular files, e.g., text, graphics ,video, source code, executable programs...</p>
<p>2. Directory files that store a list of files. </p>
<p>3. Buffered special files (block devices), e.g., disk drive, USB key. They are called buffered because a buffer in memory is used when reading/writing them. </p>
<p>4. Unbuffered special files (character devices), e.g., terminal, keyboard. </p>
<p>5. Symbolic links are references to some other files. They are like shortcuts in Windows. We will learn more about them later.</p>
<p>6. Pipes which are for inter-process communication.</p>
<p>7. Sockets which are also for inter-process communication, and you will learn them in a 3rd-year O/S course.</p>
<p>To see what type a file belongs to, we can use the -l option (this is the character l, not digit 1) of the ls command. When we type ls -l to list the files, each file is listed on a sperate line with information such as dates, size and permissions. Its file type is also given, and you can look at the first character of each line to see the type of the corresponding file. For the above seven types, you will see the following seven characters that correspond to them: -, d, b, c, l (character l), p, s.</p>
<h3>The Directory Structure</h3>
<p>The figure below is the directory structure of the bluenose server and  I will use it as an example to show what a directory structure looks like in a typical UNIX system.</p>
<p><img src="directory.jpg" width="782" height="310" alt="directory tree"></p>
<p>In a directory structure, there is a unique main directory called root directory. It is denoted by /. The root directory typically contains several files and subdirectories. Here we have the notion of parent directory and subdirectory. If directory A contains directory B directly, then A is the parent directory of B, and B is a subdirectory of A. The subdirectories of root further contain files and other directories, and so on. This creates a tree structure. </p>
<p>Every directory has two special entries. First, itself, and this is denoted by a dot (.). Second, its parent, denoted by two dots (..).</p>
<h3>Pathnames (Path)</h3>
<p>The notion of pathname is used to refer to each file. As observed in the previous example, files in different directories can have the same name. There are two directories files with the name bin. How do we identify them? We make use of the observation that they correspond to different paths in the tree directory. </p>
<p>A path is a sequence of directory names that leads you through the hierarchy from a starting directory to a target file. There are two types of paths.</p>
<p>One natural way of describing a path is to start from the root. This is called absolute path, which is relative to root. Some examples are: /bin, /usr/bin, /users/faculty/mhe/csci2132/lab1/HelloWorld.java. In each example, the first / means the root, and subsequent /'s are used as separators.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</BODY>

</HTML>
